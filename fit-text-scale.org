
* about
:PROPERTIES:
:EXPORT_FILE_NAME: README.org
:END:

fit-text-scale

** what

#+name: documentation-what
#+begin_src text
~fit-text-scale~ provides functions to maximize the fontsize to fit
the text into a window.

Up to now there are three functions:
- Choose the maximal text scale to still see the full line.
- Choose the maximal text scale to still see the full lines.
- Choose the maximal text scale to still see all lines of a buffer.
#+end_src

** usage

#+name: documentation-usage
#+begin_src text
Use

- ~M-x fts-max-font-size-see-lines~
  - Choose about maximal text scale so that longest visible line still
    fits in current window.
- ~M-x fts-max-font-size-see-line~
  - Choose about maximal text scale so that the *current* line still
    fits in current window.
- ~M-x fts-max-font-size-see-buffer~
  - Choose about maximal text scale so that the buffer content still
    fits in current window.
#+end_src

*** Keybindings
:PROPERTIES:
:ID:       ddba5bdd-1c7b-44ed-bd6a-e249e5426de4
:END:

Keybindings could be set as

#+begin_src emacs-lisp :tangle no

; key bindings
(global-set-key
 (kbd "C-x C-&")
 (lambda (&optional arg)
   (interactive "P")
   (apply
    (if arg
        #'fts-max-font-size-see-line
      #'fts-max-font-size-see-lines)
    nil)))

(global-set-key
 (kbd "C-x C-*")
 (lambda (&optional arg)
   (interactive "P")
   (fts-max-font-size-see-buffer)))
#+end_src

With these settings

- C-x C-& binds to ~fts-max-font-size-see-lines~.
- C-u C-x C-& binds to ~fts-max-font-size-see-line~.
- C-x C-* binds to ~fts-max-font-size-see-buffer~.

Also recall the bindings for text scale { C-x C-+ } { C-x C-- } { C-x
C-0 }.

** licence
:PROPERTIES:
:ID:       e8942229-c677-4ec0-9543-ff7ce3e47ce5
:END:

#+name: license
#+begin_src text :tangle LICENSE
Copyright (C) 2017, 2018 Marco Wahl

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
#+end_src

* tasks
** TODO investigate irritations with org-links

hidden text can be irritating for sometimes e.g. org links.

** DONE keep license information DRY :ARCHIVE:
CLOSED: [2018-06-28 Thu 14:34]
:LOGBOOK:
- CLOSING NOTE [2018-06-28 Thu 14:34]
:END:

the license information now lives in a source block in the about
section.  this block is referenced from the code and get's weaved in
at the tangling.

same for the rest of the documentation btw.

* code
:PROPERTIES:
:ID:       5413952e-3e5b-4d3f-b48f-c9d5655c187b
:header-args: :tangle fit-text-scale.el :comments both
:END:

** meta
:PROPERTIES:
:ID:       dcec0aa7-532f-4b0d-a562-5f1b7a1734ca
:END:

#+name: note-about-generation
#+begin_src emacs-lisp :tangle no

;; THIS FILE HAS BEEN GENERATED.
#+end_src

** prologue
:PROPERTIES:
:ID:       dc521e3c-123a-429f-9ad2-8451c1a11035
:END:

#+begin_src emacs-lisp  :tangle fit-text-scale.el :comments no :noweb yes
;;; fit-text-scale.el --- Fit text by scaling -*- lexical-binding: t ; eval: (view-mode 1) -*-
<<note-about-generation>>

;; Author: <marcowahlsoft@gmail.com>
;; Keywords: convenience
#+end_src

#+begin_src emacs-lisp :noweb yes

;; <<license>>

;;; Commentary:

;; <<documentation-what>>

;; <<documentation-usage>>

;;; Code:
#+end_src

** auxilliaries

*** truncated lines environment
:PROPERTIES:
:ID:       1418004a-5c5f-4c19-9738-78b7efbef3dc
:END:

#+begin_src emacs-lisp

(defmacro fts-with-truncated-lines (&rest body)
  (let ((truncate-lines-before (gensym)))
    `(let ((,truncate-lines-before truncate-lines))
      (unless ,truncate-lines-before
        (toggle-truncate-lines))
      (unwind-protect
          (progn
            ,@body)
        (unless ,truncate-lines-before
          (toggle-truncate-lines))))))
#+end_src

** text scale wrapper
:PROPERTIES:
:ID:       17ed5806-2afd-4771-8495-89558378e2d5
:END:

#+begin_src emacs-lisp

;; text scale wrapper
#+end_src

#+begin_src emacs-lisp
(defun fts--increase ()
  (text-scale-increase 1)
  (sit-for 0.2))
#+end_src

#+begin_src emacs-lisp
(defun fts--decrease ()
  (text-scale-decrease 1)
  (sit-for 0.2))
#+end_src

** measurement
:PROPERTIES:
:ID:       6f4c44ee-0f77-40d5-9ba2-d1d384fcc9ca
:END:

#+begin_src emacs-lisp

;; measurement

(require 'face-remap) ; text-scale- functions

(defun fts--line-width-in-pixel ()
  "Calculate line width containing point in pixel."
  (save-excursion
    (let* ((start (save-excursion (beginning-of-visual-line) (point)))
           (end (save-excursion (end-of-visual-line) (point))))
      (beginning-of-visual-line)
      (if (and (posn-at-point start) (posn-at-point end))
          (- (car (posn-x-y (posn-at-point end)))
             (car (posn-x-y (posn-at-point start))))
        (1+ (fts--window-width-in-pixel))))))

(defun fts--window-width-in-pixel ()
  "Return window width in pixel."
  (let* ((window-inside-pixel-edges (window-inside-pixel-edges)))
    (- (nth 2 window-inside-pixel-edges)
       (nth 0 window-inside-pixel-edges))))

(defun fts--buffer-height-fits-in-window-p ()
  (save-excursion
    (goto-char (point-min))
    (sit-for 0)
    (posn-at-point (point-max))))
#+end_src

** find longest line
:PROPERTIES:
:ID:       1b3fd6e6-bf2b-4897-8f18-b732f6753cf8
:END:

the longest line length is essential to fit a part horizontally into a
given window.

#+begin_src emacs-lisp

;; find longest line

(defvar fts-consider-max-number-lines 42)

;;;###autoload
(defun fts-goto-visible-line-of-max-length ()
  "Set point into longest visible line.
Take at most `fts-consider-max-number-lines' lines into account."
  (interactive)
  (fts-with-truncated-lines
   (let* ((max-line-number
           (min (save-excursion (move-to-window-line -1))
                fts-consider-max-number-lines))
          (n 0)
          (index-of-max-line-length 0)
          (max-length (save-excursion
                        (move-to-window-line n)
                        (fts--line-width-in-pixel))))
     (while (< n max-line-number)
       (incf n)
       (move-to-window-line n)
       (let ((hl-line-mode t)) (hl-line-highlight))
       (sit-for 0) ; get visual progress indicator.
       (let ((length-candidate  (save-excursion
                        (move-to-window-line n)
                        (fts--line-width-in-pixel))))
         (when (< max-length length-candidate)
           (setq max-length length-candidate)
           (setq index-of-max-line-length n)))
       (let ((hl-line-mode t)) (hl-line-highlight)))
     (move-to-window-line index-of-max-line-length)
     (let ((hl-line-mode nil)) (hl-line-highlight)))))
#+end_src

** fit in window
:PROPERTIES:
:ID:       9df260fe-b9dc-4444-8fab-56ea1cb9ebd5
:END:

#+begin_src emacs-lisp

;; fit in window
;;;###autoload
(defun fts-max-font-size-see-buffer ()
  "Use the maximal text scale to fit the buffer in the window.
When at minimal text scale stay there and inform."
  (interactive)
  (save-excursion
    (while (fts--buffer-height-fits-in-window-p)
      (fts--increase))
    (while (and
            (not (fts--buffer-height-fits-in-window-p))
            (< (1+ (text-scale-min-amount))
               (if text-scale-mode text-scale-mode-amount 0)))
      (fts--decrease))
    (when (= (floor (text-scale-min-amount))
             (if text-scale-mode text-scale-mode-amount 0))
      (message "At minimal text scale."))))

;;;###autoload
(defun fts-max-font-size-see-line ()
  "Use the maximal text scale to fit the line in the window.
If this function gives a text scale not as big as it could be
then the next call might.

DO try to get rid of the factor trick thing below.  this might be
when `text-rescale-line-width-in-pixel' is fixed."
  (interactive)
  (text-scale-mode)
  (fts-with-truncated-lines
   (let
       ((factor 1.05)
        (min-width 23)
        (fts-max-amount 20)
        (fts-min-amount -12))
     (save-excursion
       (while (and (< text-scale-mode-amount fts-max-amount)
                   (<= (* factor (max min-width (fts--line-width-in-pixel)))
                       (fts--window-width-in-pixel)))
         (fts--increase))
       (while (and (< fts-min-amount text-scale-mode-amount)
                   (< (fts--window-width-in-pixel)
                      (* factor (max min-width (fts--line-width-in-pixel)))))
         (fts--decrease))))))

;;;###autoload
(defun fts-max-font-size-see-lines ()
  "Use the maximal text scale to fit the lines on the screen in the window.
If this function gives a text scale not as big as it could be
then the next call might."
  (interactive)
  (save-excursion
    (fts-goto-visible-line-of-max-length)
    (fts-max-font-size-see-line)))
#+end_src

** epilogue
:PROPERTIES:
:ID:       1ee365eb-e9ce-4ac3-ac14-1b2361d55ed8
:END:

#+begin_src emacs-lisp

(provide 'fit-text-scale)


;;; fit-text-scale.el ends here
#+end_src
