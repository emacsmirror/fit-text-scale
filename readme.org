#+header-args:emacs-lisp+ :comments no

* fit-text-scale

** Demo GIF :ATTACH:
:PROPERTIES:
:ID:       1d3972f6-3160-4fce-8637-b313968d97cf
:END:

[[file:data/1d/3972f6-3160-4fce-8637-b313968d97cf/output-2020-02-14-00:41:53.gif]]

** Why

#+name: documentation-why
#+begin_src text

You are too lazy to do the C-x C-+ + + +... - - - - ... + + - dance
all the time to see the FULL line in maximal font size?

You want a keystroke to see the whole buffer at once by changing the
font size?
#+end_src

** What

#+name: documentation-what
#+begin_src text

~fit-text-scale~ is an automation to set the scale so that the text
uses the maximal space to fit in the window.

Scale stands for the zoom of the font.

There are three functions:
- Choose the maximal text scale to still see the full line.
- Choose the maximal text scale to still see the full lines.
- Choose the maximal text scale to still see all lines of a buffer.
#+end_src

** Usage

#+name: documentation-usage
#+begin_src org
The following code in an init file binds the
functionality to keys.

,#+begin_src emacs-lisp
(global-set-key
 (kbd "C-x C-&")
 (lambda (&optional arg)
   (interactive "P")
   (apply
    (if arg
        #'fit-text-scale-max-font-size-fit-line
      #'fit-text-scale-max-font-size-fit-lines)
    nil)))

(global-set-key
 (kbd "C-x C-*")
   #'fit-text-scale-max-font-size-fit-buffer)
,#+end_src

With these settings there is

- ~C-x C-&~
  - Choose maximal text scale so that the longest line visible still
    fits in current window.
- ~C-u C-x C-&~
  - Choose maximal text scale so that the *current* line still
    fits in the window.
- ~C-x C-*
  - Choose maximal text scale so that the vertical buffer content
    still fits into current window.
- ~C-x C-0~ (Already given.  This is good old ~text-scale-adjust~.)
  - Switch back to the default size when control about the sizes has
    been lost.
- ~C-x C-+~ + - and ~C-x C--~ - + for fine tuning.  (Also given.)
- ~C-g C-g C-g~... (hit the keyboard hard!) if something, hrm, hangs.
#+end_src

*** Customization

#+name: documentation-customize
#+begin_src org
There are some parameters to fine tune the functionality.  Check it out with

    M-x customize-group fit-text-scale

#+end_src

** Install

#+name: documentation-install
#+begin_src org :tangle no
To install fit-text-scale add the lines (with YOUR installation path)
to your init file.

,#+begin_src emacs-lisp
(push "/PATH/TO/fit-text-scale" load-path)
(require 'fit-text-scale)
,#+end_src

Consider to add also the keybindings above.
#+end_src

fit-text-scale could get a package some day.

** Licence
:PROPERTIES:
:ID:       e8942229-c677-4ec0-9543-ff7ce3e47ce5
:END:

GPL 3

#+name: license
#+begin_src text :tangle LICENSE :noweb yes
Copyright (C) 2017-2020 Marco Wahl

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
#+end_src

** Version

#+name: fit-text-scale-version
#+begin_src text
1.1.2
#+end_src

** Typical Metadata

Author, contact, dependencies.

#+name: package-metadata
#+begin_src text :noweb yes
Author: Marco Wahl <marcowahlsoft@gmail.com>
Maintainer: Marco Wahl <marcowahlsoft@gmail.com>
Created: 2017
Version: <<fit-text-scale-version>>
Package-Requires: ((emacs "25.1"))
Keywords: convenience
URL: https://gitlab.com/marcowahl/fit-text-scale
#+end_src

** Changelog

*** [2020-02-16 Sun] 1.1.1 take care of invisible text

invisible text should not add to line length.  invisible text occurs
e.g. with Org links

*** [2020-02-16 Sun] 1.1.0 prepare for MELPA proposition

- [X] bytecompile.
- [X] checkdoc.
- [X] package-lint.

** Development

*** El Development vs. el Release

Recall the opportunity to use the property line

#+begin_src text
:header-args:emacs-lisp+: :comments both
#+end_src

instead of

#+begin_src text
:header-args:emacs-lisp+: :comments no
#+end_src

to create tangle-info for detangling.

The additional info can be used with function org-babel-detangle.
Detangle means to edit the tangled file and bring these changes to the
literate source file.

These header arguments are not used to produce lisp-butt-mode.el
releases due to the wish from the melpa side.

* code
:PROPERTIES:
:ID:       5413952e-3e5b-4d3f-b48f-c9d5655c187b
:header-args: :tangle fit-text-scale.el
:END:

** meta
:PROPERTIES:
:ID:       dcec0aa7-532f-4b0d-a562-5f1b7a1734ca
:END:

#+name: note-about-generation
#+begin_src emacs-lisp :tangle no

;; THIS FILE HAS BEEN GENERATED.
#+end_src

** prologue
:PROPERTIES:
:ID:       dc521e3c-123a-429f-9ad2-8451c1a11035
:END:

#+begin_src emacs-lisp  :tangle fit-text-scale.el :comments no :noweb yes
;;; fit-text-scale.el --- Fit text by scaling -*- lexical-binding: t -*-
<<note-about-generation>>


#+end_src

#+begin_src emacs-lisp :noweb yes

;; <<package-metadata>>

;; <<license>>

;;; Commentary:

;; <<documentation-why>>

;; <<documentation-what>>

;; <<documentation-usage>>

;; <<documentation-customize>>

;; <<documentation-install>>

;;; Code:
#+end_src

** dependencies

#+begin_src emacs-lisp

(require 'cl-lib) ; cl-incf
(require 'cl-macs) ; cl-assert
#+end_src

** customizables
:PROPERTIES:
:ID:       02c8f412-d6bd-4ae8-a8b6-e41626ed3e82
:END:

#+begin_src emacs-lisp

;; customizables
#+end_src

#+begin_src emacs-lisp
(defcustom fit-text-scale-hesitation 0.01
  "Duration to wait til next text scale change.
Smallest sane value is 0 which should result in the fastest
animation.  Only effective when `fit-text-scale-graphic-sugar' is on."
  :type 'number
  :group 'fit-text-scale)

(define-obsolete-variable-alias 'fit-text-scale-graphic-suger 'fit-text-scale-graphic-sugar "2020-02-13")

(defcustom fit-text-scale-graphic-sugar t
  "Animate the zoom.  `fit-text-scale-hesitation' controls the animation speed."
  :type 'boolean
  :group 'fit-text-scale)

(defcustom fit-text-scale-max-amount 23
  "Maximum achievable text scale with this program."
  :type 'number
  :group 'fit-text-scale)

(defcustom fit-text-scale-min-amount -12
  "Minimum achievable text scale with this program."
  :type 'number
  :group 'fit-text-scale)

(defcustom fit-text-scale-consider-max-number-lines 42
"Maximum number of lines to consider to choose the longest."
  :type 'integer
  :group 'fit-text-scale )
#+end_src

** text scale wrapper
:PROPERTIES:
:ID:       17ed5806-2afd-4771-8495-89558378e2d5
:END:

#+begin_src emacs-lisp

;; text scale wrapper
#+end_src

#+begin_src emacs-lisp
(require 'face-remap)  ; text-scale- functions
#+end_src

#+begin_src emacs-lisp
(defun fit-text-scale--increase (arg)
  "Increase text scale.  Possibly redisplay.
ARG stands for the amount.  1 is increase the smallest possible.
-1 is decrease."
  (text-scale-increase arg)
  (when fit-text-scale-graphic-sugar
    (sit-for fit-text-scale-hesitation)))
#+end_src

** measurement
:PROPERTIES:
:ID:       6f4c44ee-0f77-40d5-9ba2-d1d384fcc9ca
:END:

#+begin_src emacs-lisp

;; measurement

(defun fit-text-scale--line-length ()
  "Calculate line width containing point in chars."
  (save-excursion (end-of-line) (current-column)))

(defun fit-text-scale--buffer-height-fits-in-window-p ()
  "Return if buffer fits completely into the window."
  (save-excursion
    (goto-char (point-min))
    (sit-for 0)
    (posn-at-point (point-max))))
#+end_src

** find longest line
:PROPERTIES:
:ID:       1b3fd6e6-bf2b-4897-8f18-b732f6753cf8
:END:

Finding the longest line is essential to fit a part horizontally into
a given window.

#+begin_src emacs-lisp

;; find longest line

;;;###autoload
(defun fit-text-scale-goto-visible-line-of-max-length-down ()
  "Set point into longest visible line looking downwards.
Take at most `fit-text-scale-consider-max-number-lines' lines into account."
  (interactive)
  (let (truncate-lines)
    (let* ((point-in-bottom-window-line
            (save-excursion (move-to-window-line -1) (point)))
           (n 0)
           (max-length (fit-text-scale--line-length))
           (target (point)))
      (while (and (< n fit-text-scale-consider-max-number-lines)
                  (< (point) point-in-bottom-window-line)
                  (not (eobp)))
        (let ((length-candidate (fit-text-scale--line-length)))
          (when (< max-length length-candidate)
            (setq max-length length-candidate)
            (setq target (point))))
        (forward-visible-line 1)
        (cl-incf n))
      (goto-char target))))
#+end_src

** fit in window
:PROPERTIES:
:ID:       9df260fe-b9dc-4444-8fab-56ea1cb9ebd5
:END:

*** fit in window horizontally
:PROPERTIES:
:ID:       60187a04-6f1c-4a16-9653-18ef3aa2e24b
:END:

#+begin_src emacs-lisp

;;;###autoload
(defun fit-text-scale-max-font-size-fit-line ()
  "Use the maximal text scale to fit the line in the window."
  (interactive)
  (text-scale-mode)
  (beginning-of-line)
  (let ((eol (progn (save-excursion (end-of-visible-line)
                                    (point)))))
    (cl-assert (<= (progn (save-excursion (end-of-visual-line) (point)))
                eol)
            "programming logic error.  this is a bad sign.  please report the issue.")
    (while (and (< text-scale-mode-amount fit-text-scale-max-amount)
                (= (progn (save-excursion (end-of-visual-line) (point))) eol))
      (fit-text-scale--increase 1))
    (while  (and (< fit-text-scale-min-amount text-scale-mode-amount)
                 (< (progn (save-excursion (end-of-visual-line) (point))) eol))
      (fit-text-scale--increase -1))))

;;;###autoload
(defun fit-text-scale-max-font-size-fit-lines ()
  "Use the maximal text scale to fit the lines in the window.
Actually only the first `fit-text-scale-consider-max-number-lines' are
considered."
  (interactive)
  (save-excursion
    (move-to-window-line 0)
    (fit-text-scale-goto-visible-line-of-max-length-down)
    (fit-text-scale-max-font-size-fit-line)))
#+end_src

*** fit in window vertically
:PROPERTIES:
:ID:       4cb93e9e-c8ce-4337-a1ba-8a24be8e532b
:END:

#+begin_src emacs-lisp

;;;###autoload
(defun fit-text-scale-max-font-size-fit-buffer ()
  "Use the maximal text scale to fit the buffer in the window.
When at minimal text scale stay there and inform."
  (interactive)
  (save-excursion
    (while (and (fit-text-scale--buffer-height-fits-in-window-p)
                (< (or text-scale-mode-amount 0)
                   (text-scale-max-amount)))
      (fit-text-scale--increase 1))
    (while (and
            (not (fit-text-scale--buffer-height-fits-in-window-p))
            (< (1+ (text-scale-min-amount))
               (or text-scale-mode-amount 0)))
      (fit-text-scale--increase -1))
    (when (= (floor (text-scale-max-amount))
             (or text-scale-mode-amount 0))
      (message "At maximal text scale."))
    (when (= (floor (text-scale-min-amount))
             (or text-scale-mode-amount 0))
      (message "At minimal text scale."))))
#+end_src

** epilogue
:PROPERTIES:
:ID:       1ee365eb-e9ce-4ac3-ac14-1b2361d55ed8
:END:

#+begin_src emacs-lisp

(provide 'fit-text-scale)


;;; fit-text-scale.el ends here
#+end_src

* tasks

** open

*** TODO Document Process with MELPA

- [2020-02-17 Mon] conao3 points out a dependency issue.
  - => change: incf to cl-incf, assert to cl-assert.
  - => add requires.
- [2020-02-16 Sun] placed a pull
  request.  see https://github.com/melpa/melpa/pull/6701.
- [2020-02-16 Sun] some cleanup done.

** closed

*** DONE investigate irritations with org-links

- hidden text can be irritating sometimes e.g. with Org links.
- using function current-column now to find out line width.  AFAICT it
  takes care about invisible parts and yields the visible line width.
  - the function behaves more as one expects now, I find.

*** DONE fit-text-scale-max-font-size-fit-lines only consider lines down

- was: starting with first visible line in the window.
- [2020-02-16 Sun 21:22] and it's _all_ visible lines in the window
  again.
- :)
- suspicion: should this better be an option?

*** DONE keep license information DRY :ARCHIVE:
CLOSED: [2018-06-28 Thu 14:34]
:LOGBOOK:
- CLOSING NOTE [2018-06-28 Thu 14:34]
:END:

the license information now lives in a source block in the about
section.  this block is referenced from the code and get's weaved in
at the tangling.

same for the rest of the documentation btw.
